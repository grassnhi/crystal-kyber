$date
	Sun Feb 16 15:14:43 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module mult_tb $end
$var wire 12 ! out [11:0] $end
$var reg 1 " clk $end
$var reg 12 # in1 [11:0] $end
$var reg 12 $ in2 [11:0] $end
$var reg 1 % rst $end
$scope module mult_ut $end
$var wire 1 " clk $end
$var wire 12 & in1 [11:0] $end
$var wire 12 ' in2 [11:0] $end
$var wire 1 % rst $end
$var wire 12 ( res [11:0] $end
$var wire 24 ) product [23:0] $end
$var reg 12 * reg1 [11:0] $end
$var reg 12 + reg2 [11:0] $end
$var integer 32 , i [31:0] $end
$scope module mod $end
$var wire 24 - c [23:0] $end
$var wire 1 " clk $end
$var wire 1 % rst $end
$var wire 6 . s_2 [5:0] $end
$var wire 6 / s_1 [5:0] $end
$var wire 6 0 r_1 [5:0] $end
$var wire 14 1 r1c0 [13:0] $end
$var wire 12 2 r [11:0] $end
$var wire 14 3 d_1 [13:0] $end
$var wire 14 4 d1_sum [13:0] $end
$var wire 16 5 c1 [15:0] $end
$var wire 8 6 c0 [7:0] $end
$var wire 14 7 R [13:0] $end
$var wire 13 8 Q_1 [12:0] $end
$var reg 13 9 Q_1_reg [12:0] $end
$var reg 14 : R_reg [13:0] $end
$var reg 8 ; c0_reg [7:0] $end
$var reg 6 < c1_reg [5:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b100 ,
b0 +
b0 *
b0 )
b0 (
bx '
bx &
1%
bx $
bx #
0"
b0 !
$end
#2
b100 ,
1"
#4
0"
#5
b100101100 $
b100101100 '
b1010 #
b1010 &
0%
#6
b101110111000 )
b100101100 +
b1010 *
b11 ,
1"
#8
0"
#10
b11 ,
1"
#12
0"
#14
b11 ,
1"
#16
0"
#18
b1 4
b1 3
b10111000 6
b1011 5
b101110111000 -
b11 ,
1"
#20
0"
#22
b1011 0
b1011 /
b101110111000 7
b101110111000 1
b10111000 ;
b1011 <
b11 ,
1"
#24
0"
#25
b110011011010 $
b110011011010 '
b110011100100 #
b110011100100 &
#26
b101110111000 !
b101110111000 (
b101110111000 2
b110011011010 +
b101001011010101000101000 )
b110011100100 *
b101110111000 :
b11 ,
1"
#28
0"
#30
b11 ,
1"
#32
0"
#34
b11 ,
1"
#36
0"
#38
b110010111101 8
b1100101111011 4
b1100111100010 3
b101000 6
b1010010110101010 5
b101001011010101000101000 -
b11 ,
1"
#40
0"
#42
b10 /
b10001 0
b110001 .
b1000100101000 1
b101000 ;
b101010 <
b10001101011 7
b110010111101 9
b11 ,
1"
#44
0"
#45
b110000100111 $
b110000100111 '
b101110111000 #
b101110111000 &
#46
b10001101011 !
b10001101011 (
b10001101011 2
b10001101011 :
b110000100111 +
b100011100110100100001000 )
b101110111000 *
b11 ,
1"
#48
0"
#50
b11 ,
1"
#52
0"
#54
b11 ,
1"
#56
0"
#58
b101011110011 8
b1010111100111 4
b1011001000000 3
b1000 6
b1000111001101001 5
b100011100110100100001000 -
b11 ,
1"
#60
0"
#62
b10001 /
b10010 0
b111111 .
b1001000001000 1
b1000 ;
b101001 <
b11100010101 7
b101011110011 9
b11 ,
1"
#64
0"
#65
b1010 $
b1010 '
b11001000 #
b11001000 &
#66
b11100010101 !
b11100010101 (
b11100010101 2
b1010 +
b11111010000 )
b11001000 *
b11100010101 :
b11 ,
1"
#68
0"
#70
b0 8
b0 4
b0 3
b0 /
b0 0
b0 .
b0 6
b0 5
b0 1
b0 ;
b0 <
b0 7
b0 9
b0 +
b0 )
b0 *
b0 -
b0 !
b0 (
b0 2
b0 :
b100 ,
1"
1%
#72
0"
#74
b100 ,
1"
#76
0"
#78
b100 ,
1"
#80
0"
#82
b100 ,
1"
#84
0"
#86
b100 ,
1"
#88
0"
#90
b100 ,
1"
